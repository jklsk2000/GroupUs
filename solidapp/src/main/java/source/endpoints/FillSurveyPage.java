package source.endpoints;

import com.google.gson.Gson;
import com.j256.ormlite.dao.Dao;

import source.model.Event;
import source.model.SimpleSurveyResponse;
import source.model.Student;
import source.model.Survey;
import spark.ModelAndView;
import spark.Spark;
import spark.template.velocity.VelocityTemplateEngine;

import java.net.URLDecoder;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Endpoints used by students to fill out existing class surveys.
 */
public class FillSurveyPage implements SparkSetup {

	public void runSpark() {
		Spark.get("/fillsurvey/:surveyid", (req, res) -> {

			int id = Integer.parseInt(req.params(":surveyid"));
			res.cookie("svId", String.valueOf(id));
			Dao surveyDao = Daos.getSurveyORMLiteDao();
			Dao questionDao = Daos.getQuestionORMLiteDao();
			List<Survey> foundSurvey = surveyDao.queryForEq("id", id);
			Survey s;
			if (foundSurvey.size() <= 0) {
				System.err.println("No survey found!");
				res.cookie("error", URLEncoder.encode("No survey was found for this class!", StandardCharsets.UTF_8.toString()));
				res.redirect("/error");
				return null;
			}
			s = foundSurvey.get(0);

			Map<String, Object> model = new HashMap<String, Object>();
			model.put("survey", s);

			model.put("username", req.cookie("username"));
			model.put("role", req.cookie("role"));

			return new ModelAndView(model, "public/fillsurvey.vm");
		}, new VelocityTemplateEngine());

		Spark.post("/fillsurvey/:surveyid", (req, res) -> {
			
			/**
			 * Note: responseArr contains the JSON.stringify version of the responses from the user.
			 * svId is the surveyId of the survey taken.
			 * 
			 * These cookies are generated by the javascript in fillsurvey.vm
			 */

			Dao surveyDao = Daos.getSurveyORMLiteDao();

			if (req.cookie("responseArr") != null) { // it should be ',:^(
				Dao responseDao = Daos.getResponseORMLiteDao();

				String username = req.cookie("username");

				int survey_id = Integer.parseInt(req.params(":surveyid"));
				List<Survey> surveyArr = surveyDao.queryForEq("id", survey_id);
				Survey respondingTo = surveyArr.get(0);
				SimpleSurveyResponse userResponse = new SimpleSurveyResponse(respondingTo, username, ((Student) MainPage.getObjectFromUsername(username)).getStoredInfo().getId());

				String encodedArray = req.cookie("responseArr");
				Gson gson = new Gson();
				String[] answerArray = gson.fromJson(encodedArray, String[].class);
				for (int i = 0; i < answerArray.length; i++) {
					userResponse.answerQuestion(i, Integer.parseInt(answerArray[i]));
				}
				responseDao.create(userResponse);

				res.removeCookie("responseArr");
				if (req.cookie("svId") != null) { // it should be ',:^(
					int id = Integer.parseInt(req.cookie("svId"));
					res.removeCookie("svId");
					Survey s = ((List<Survey>) surveyDao.queryForEq("id", id)).get(0);
					Student o = ((Student) MainPage.getObjectFromUsername(URLDecoder.decode(req.cookie("username"), StandardCharsets.UTF_8.toString())));
					Event e = (Event) Daos.getEventORMLiteDao().queryForId(s.getSourceEvent().getId()); // redundant?
					e.markAsCompletedSurvey(((Student) o).getStoredInfo().getId());
					Daos.getEventORMLiteDao().update(e);

					res.redirect("/");
					return null;
				} else {
					res.cookie("error", URLEncoder.encode("Fatal error occured while generating a response.", StandardCharsets.UTF_8.toString()));
					res.redirect("/error");
				}
			}

			res.redirect("/");
			return null;
		});
	}
}
